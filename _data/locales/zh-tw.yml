# 如何為「開源」貢獻？

> 你也想要為開源貢獻些什麼嗎？這是一份為新手跟老手準備的開源貢獻指南。
> 

##  目錄
- 第一節：為什麼要貢獻？
- 第二節：怎麼樣做才能「貢獻」？
- 第三節：在專案中找到自己的貢獻定位
- 第四節：找到你要貢獻的專案
- 第五節：如何提出貢獻？
- 第六節：貢獻完，然後呢？
- 第七節：完成了！


## 第一節：為什麼要貢獻？

> *「[Freenode](https://freenode.net/)」為我的人生開啟了許多扇門，我從中學到了許多未來在學業或工作上都很受用的技能。我發現為一項開源專案貢獻幫助的不只是專案本身，也是自己。*
> 
> *---@errietta, 《[為何我熱愛開源](https://www.errietta.me/blog/open-source/)》*

你可能會感到好奇，為什麼要為開源做貢獻？為開源貢獻本身是件有益的事，你不只能從中學習新事物，也能換位學習如何教別人，甚至鍛鍊許多技能。

為開源貢獻的好處跟原因還有很多，以下列舉一些：

### 強化你既有的能力，讓自己更進步

不論是寫程式、使用者介面設計、平面設計、寫作，還是組織事物，如果你也在尋找練習與實踐的機會，那麼你一定能在開源專案中找到一席之地。

**找到志同道合的夥伴**

開源的社群通常都很友善、熱心，這些特質讓許多人願意一直回來貢獻所長，與社群內的夥伴建立良好的互動關係。許多「開源人」就是這樣透過一場又一場的研討活動，或是開著視窗徹夜聊天、探討各種議題，最後彼此成為對方人生中重要的朋友。

**找到你的導師，同時也成為別人的導師**

在團體中與夥伴一起開發開源專案，意味著你需要向別人解釋及分享你是如何做的，也同時代表你會需要尋求他人幫助。

從他人那學習，同時傳承你所學；彼此學習、彼此教導，每個人都曾從這過程中獲得幫助。

### 透過實踐專案，為開源公眾貢獻，建立屬於你的口碑
 
根據開源定義，在開源專案下的工作都是公開的。意即，整個開源的平台就是你對外展現實力的「履歷」。

### 學會人與人的相處之道

由於開源的一項特質就是與夥伴協作，所以進行開源專案的同時，你我都能夠學習如何領導、如何管理。例如：怎麼解決紛爭、組織團隊、排定工作優先順序。

**開源鼓勵創造改變，就算只是微小的改變**

你是否曾在瀏覽網頁時看到一些錯字，希望有人來修改它？在開源的世界裡，你就可以直接去修改——這些都是改變與貢獻。

你無需顧忌太多，也不一定非得要長時間投入，才叫創造改變跟貢獻。開源讓人們在很舒服的狀態下做事，而這才是這個世界應有的體驗。 

## 第二節：怎麼樣做才能「貢獻」？

> **如果你是開源的初心者，第一次參與開源可能會對所謂「貢獻」的流程感到不確定：要怎麼找到正確的開源專案？不會寫程式怎麼辦？萬一做錯事怎麼辦？**
> 

其實不用太擔心，條條大路通羅馬，開源項目有太多的路徑可以參與！！
以下一些小撇步可以幫助你越練越有經驗：

### 撇步一：你不一定要會寫程式

許多對開源常見的誤解是參與開源一定要會寫程式。但事實上，寫程式以外的其他工作項目往往才是[最容易被忽略的](https://blog.github.com/2016-06-23-the-shape-of-open-source/)。如果你能協助程式碼以外的工作，就是對開源專案莫大的貢獻了！

> *很多人因為我做了 CocoaPods 而認識我，但他們不知道我其實在 CocoaPods 沒做什麼，大多時候只是貢獻文件跟品牌行銷而已。*
> *<div style="text-align: right"> ---@orta,《[毫無懸念加入開源行列](https://academy.realm.io/posts/orta-therox-moving-to-oss-by-default/)》 </div>*

如果你本身即是開發者，不妨也試試寫程式之外的工作，因為這些都是參與開源專案很好的方式，同時還能認識社群中的其他人。認識並與其他夥伴建立關係，是開源很重要的一項特質，而且能幫助你開啟更多參與其他開源專案的機會跟管道。

> *2002 年 6 月 17 日我初次聯繫 Python 開發團隊（簡稱 python-dev），透過郵件列表向他們發出接受補丁的請求。我很快的發現他們開源專案的一些 bug，所以我決定幫Python 的開發團隊製作「郵件摘要」（ email digest ），整理所有的提問跟補丁需求。整理「郵件摘要」提供了我一個參與開源跟發問的機會與理由，但更重要的是當有人指出要修復的問題時，我可以很快的知道。*
>*<div style="text-align: right"> ---@brettcannon,《[維護者的故事](https://github.com/open-source/stories/brettcannon)》</div>*

### 撇步二：你喜歡辦活動嗎？

那你可以：

- 舉辦各種工作坊、線上或線下的活動分享，讓大家彼此交流跟認識，就像 [@fzamperin 幫 NodeSchool 做的那樣]((https://github.com/nodeschool/organizers/issues/406))
- 組織研討會，讓專案可以更深入被討論
- 協助開源社群的夥伴找到適合他們的研討會、協助他們投稿計劃書

### 撇步三：你喜歡設計嗎？

那你可以：

- 幫專案重新排版，以提高使用性
- 透過使用者體驗的調查，重新組織、優化專案的導航或選單
- 整理一份風格指南，協助專案在視覺上維持一致性
- 或者，以幫專案設計一套 T桖，或新的 logo，[像 hapi.js 在做的事](https://github.com/hapijs/contrib/issues/68)

### 撇步四：你喜歡寫東西嗎？

那你可以：

- 撰寫或改進開源專案的文件
- 整理一份檔案夾，裡面收納一些教人如何使用該專案的案例
- 幫專案製作電子報、或是從郵件列表中整理精選提問
- 幫專案撰寫與設計教學課程，[就像 PyPA 做的](https://github.com/pypa/python-packaging-user-guide/issues/194)
- 最後，你也可以幫忙翻譯專案的文件

> *說真的，記錄文件（documentation）真的非常重要。Babel 的文件到目前為止做的很好、一直是我們的亮點。但有些地方還是需要大家一起幫忙改善，即便是在哪加些段落我都會很感激。*
> *<div style="text-align: right"> ---@kittens,《[招募貢獻者](https://github.com/babel/babel/issues/1347)》</div>*

### 撇步五：你喜歡組織事物嗎？

- 幫重複的議題補上連結，或幫新議題貼上標籤
- 海巡開放中的議題，看看有沒有舊議題需要結案
- 透過發問協助推進新議題的討論

### 撇步六：你喜歡寫程式嗎？

- 找一個尚未結案的議題（Open issue）來解決。例如，[@dianjin 就是這樣幫助 Leaflet 的](https://github.com/Leaflet/Leaflet/issues/4528#issuecomment-216520560)
- 詢問他人是否需要幫忙寫新功能
- 幫忙專案架設自動化裝置 Automate project setup 
- 幫忙改進、測試工具

### 撇步七：你喜歡幫助人嗎？

- 在像是 Stack Overflow 或 Reddit 這些平台上，協助回答他人對專案的疑問。[Postgres 即是一例](https://stackoverflow.com/questions/18664074/getting-error-peer-authentication-failed-for-user-postgres-when-trying-to-ge)。
- 協助解答尚未結案的議題
- help modertate discussion boards or conversation channels 

### 撇步八：你喜歡協助別人寫程式嗎？

那你可以： 

- 協助進行程式碼審查（Code review） 
- 製作教學檔案教別人如何使用專案 
- 試著當別人的導師，就像 [@ereichert 在 Rust 專案上幫 @bronzdoc 所做的](https://stackoverflow.com/questions/18664074/getting-error-peer-authentication-failed-for-user-postgres-when-trying-to-ge)。

### 最後！開源貢獻沒有一定要跟軟體相關

雖然「開源」通常指的是軟體，但開源的協作可以是任何事物，不一定是軟體。就像你能參與貢獻的不一定是寫程式一樣。

我們周遭其實有許多程式碼之外的開源專案，像是書籍、食譜、清單、課程，只要擁有開源精神，它就能成為開源專案。舉例來說：

- @sindresorhus 打造的「[Amazing](https://github.com/sindresorhus/awesome)」清單
- @h5bp 幫忙維護前端工程師[面試題目](https://github.com/h5bp/Front-end-Developer-Interview-Questions)
- 或甚至像是 @stuartlynn 跟 @nicole-a-tesla 搜集的[海鸚冷知識](https://github.com/stuartlynn/puffin_facts)

作為開源新手，就算你是名工程師，也還是可以透過撰寫文件來入門。通常跟寫程式無關的專案做起來會比較輕鬆、不那麼嚇人，而且協作的過程能很快的幫你建立自信跟經驗。

## 第三節：在專案中找到自己的貢獻定位

> *如果你進到「議題追蹤」（Issue tracker）裡然後覺得每個東西都看起來很複雜，別擔心，這不是你的問題。要搞懂「議題追蹤」這類工具或是裡面的議題，本身就需要大量的隱性知識。你只要學會問對問題，這邊都有人能夠帶領你去熟悉這一切。*
> <div style="text-align: right"> ---@shaunagm,《[如何為開源貢獻](https://readwrite.com/2014/10/10/open-source-diversity-how-to-contribute/)》</div>

為開源貢獻有時像是在一場趴踢中走進一群陌生人裡，初次接觸總是有些不知所措。別人聊得正起勁，一個陌生人突然插話，難免顯得有些突兀。

也因此，其盲目的闖入、亂竄於各種專案中，不如先去理解開源社群的運作跟規則，這樣也反而能讓你的想法更快被注意到。

### 透視開源專案

每一個開源社群都不一樣。

就算你紮根耕耘一個專案多年，有時候你也只是很熟悉手中的這項開源專案，一但切換到下一個專案時，可能會發現前一套的邏輯不再適用，新專案可能有著截然不同的習慣、溝通方式、甚至使用的「語言」也都不同。

但是，多數的開源專案都遵循著相似的組織結構，所以其實只要能洞察並理解每個社群他們各自在開源世界裡扮演的角色，以及貢獻開源的流程，你依然可以很順暢地融入進每項專案。

一個典型的開源專案多半會有以下幾種類型人物：

- **作者（Author）**：該開源專案的創始人、或創始組織
- **擁有者（Owner）**：對組織跟倉庫具有行政管理權限的管理員（與創始人未必是同一人）
- **維護者（Maintainers）**：負責一項專案的走向，也負責專案的組織架構（專案作者跟擁有者有時會身兼維護者角色）
- **貢獻者（Contributors）**：任何對該專案參與貢獻的人
- **社群會員（Community Members）**：專案的使用者。這群人有時候會很積極的參與專案內的的討論、表達他們對專案走向的看法。

較大型的專案可能會向下細分「小組委員會」或是「工作小組」。每個小組各別負責不同的任務，例如 tooling, triage, community moderation 以及辦活動。如果想知道某個開源專案是怎麼分組、分工的，可以到該專案的網站上尋找「團隊」頁面，或在倉庫中找「治理文件」（Goverance documentation）。

一個開源專案還會有「文件」（Documentation）。這些文件檔案通常會被置頂放在倉庫的開頭。

- **授權條款（License）**: 根據開源定義，所有開源專案皆必須擁有「[開源許可協議](https://choosealicense.com/)」。如果一項專案不符合許可協議，那它本質上就不是開源專案。
- **README**：README 是一份說明文件，用來協助新加入會員理解專案的目的、為何發起、為何對你我有幫助，以及如何入門。
- **貢獻（Contributing）**：上述的 README 是用來協助會員如何 **使用** 專案，「貢獻文件」則是用來協助會員進行 **貢獻** 。這份文件會說明該開源專案需要哪些貢獻，以及貢獻的程序。由於非硬性規定，所以並非所有的開源專案都會附上「貢獻文件」。但附上「貢獻文件」通常是對貢獻者展現善意的表現。

- **行為準則（Code of Conduct）**：顾名思义，即是一些参与社区时的一些礼仪、说话方式、行为等，帮助形成一种友好的氛围。同上，並非所有的開源專案都會有行為準則，但若有附上即意味著該專案對貢獻者的友好程度。
- **其他文件**：依專案需求，還會有其他額外的文件。例如：教學文件、導覽等。規模更大的專案有時還會有「治理政策」的文件。

最後，開源專案通常會透過以下工具、管道來進行討論。進入一個專案前好好研究這些紀錄可以幫助你更了解一個開源社群其運作跟思考的方式。

- **議題追蹤（Issue tracker）**：議題追蹤是一個討論區，在這裡大家會相互討論與專案相關之議題
- **Pull request**：在這裡大家會討論與程式碼審查或其他修正相關之議題
- **論壇或郵件列表（Discussion forum or mailing lists）**：有些專案會透過這些管道進行對話、交換意見（例如透過 "How do I..." 或是 " What do you think about..."等比較輕鬆閒聊的方式，來替代直接的 Bug 通報或功能請求）。其他專案則會直接在「議題追蹤」裡進行所有的對話。

- **即時聊天（ Synchronous chat channel）**：有些專案會使用像是 Slack、IRC 等協作平台進行非正式的對話、協作，以及快速交流。

## 第四節：找到你要貢獻的專案

> **讀到這裡，你已經大致了解開源專案的運作模式，現在，是時候找到一個你可以貢獻的專案了！**
> 

如果你從來沒有為開源貢獻過，那麼謹記美國總統甘迺迪的一句名言：「**不要問國家可以為你做什麼，應該要問你可以為國家做什麼。**」

開源專案各個方面都需要貢獻者，一定有你可發揮的空間，所以初次嘗試貢獻時不用太過鑽牛角尖。

你可以試著反向思考，先從手邊已在執行或未來想要執行的專案來踏出第一步。因為會讓你積極去貢獻的專案，通常都是那些能持續吸引你的專案。

在貢獻這些專案時，記得仔細傾聽你的直覺，如果你認為這個專案可以做的更好、可以變得更不一樣，那就相信直覺，放膽去做。

記住，開源不是一個封閉或排外的小圈圈，它是由成千上萬個像你一樣的人所組成的。「開源」只是個很潮的術語，它的本質其實很簡單，就是這世界上所有的問題都可以在大家的協作下獲得解決。

讓我們來想像一下一個情境：你在瀏覽 README 時發現有錯字或失效的連結、或你剛加入一項開源專案時發現其中有需要修正東西、又或是你覺得某個重要的議題應該要被放進文件裡，卻沒被放進去。這時，請不要漠視這些需要改正的瑕疵、也不要等別人來解決。你應該要試著看看自己能不能做點什麼，透過雙手去修正、去參與、去貢獻——這才是「開源」的精髓之所在。

> 根據數據，開源專案裡有 [28 %](www.igor.pro.br/publica/papers/saner2016.pdf) 的開源貢獻來自與文件相關的工作，例如修改錯字、重新排版，或編譯。


以下的資源可以協助你找到能有所貢獻的專案：

- [GitHub 探索（GitHub Explore）](https://github.com/explore/)
- [開源星期五（Open Source Friday）](https://opensourcefriday.com/)
- [First Timers Only](https://www.firsttimersonly.com/)
- [你的第一個 PR（Your first PR）](https://yourfirstpr.github.io/)
- [CodeTriage](https://www.codetriage.com/)
- [24 Pull Requests](https://24pullrequests.com/)
- [Up For Grabs](https://up-for-grabs.net/#/)
- [像忍者一樣貢獻（Contributor-ninja）](https://contributor.ninja/)

在你找到有意願要參與貢獻的專案後，記得瀏覽專案的各種文件與紀錄，確定該專案接受會員的貢獻，以免你的努力付諸東流。

以下這份檢查表，可以幫你評估一個專案是適合開源新手：

**是否符合開源定義？**

- [ ] 這項專案符合開源許可協議嗎？（這份開源許可協議）

**這個開源專案是否願意積極接受貢獻？

觀察主幹（Master branch）上提交的活躍度。在 GitHub 上你可以從倉庫的首頁找到這些訊息。

- [ ] 這個專案最後一次的提案是什麼時候？
- [ ] 這個專案有多少位貢獻者？
- [ ] 這些貢獻者的貢獻頻率為何？（ GitHub 最上層 bar 的「Commits」可以找到相關紀錄 ）

**檢視專案議題的數量**

- [ ] 專案中有多少開放議題
- [ ] 維護者是否積極回應所有議題？
- [ ] 討論區的熱烈程度是否足夠？
- [ ] 專案議題是近期產生的嗎？還是閒置已久？
- [ ] 有哪些議題已結案？（ 在 GitHub 上，所有已結案議題都存放在「議題頁面」中的「closed」頁籤存裡）


**檢視 Pull Request** 

- [ ] 有多少開放的 Pull request？
- [ ] 維護者是否積極回應所有 Pull request？
- [ ] 討論區的熱烈程度是否足夠？
- [ ] 專案中的 Pull request 都是近期產生的嗎？還是閒置已久？
- [ ] 有多少 Pull request 是近期合併的？（ 在 GitHub 上，所有已結案的 Pull request 都存放在「Pull request」頁面中的「closed」頁籤裡）


**檢視專案的友好程度**

一個對外友善的專案通常也會很友善地歡迎來貢獻的新手。同理，友善的專案也會受到社群會員的歡迎。

- [ ] 維護者就議題所提供的解答，是否有幫助？ 
- [ ] 議題的討論是否友善？在討論區跟論壇中的會員是否友善？
- [ ] Pull request 是否被審閱（reviewed）？
- [ ] 維護者對於大家的貢獻，會不會表示感謝？

>*如果看到很長的討論串，你可以去看該專案核心開發者在末端的回應。他們是在提供有建設性的結論嗎？在為討論串作最終決定時是否還能保持風度？如果你看到一堆口水戰，那代表這個社群重心已經淪為無謂的筆戰，而不是真正在進行開發。*
> *<div style="text-align: right"> ---@kfogel,《[生產開源軟體](https://producingoss.com/en/evaluating-oss-projects.html)》</div>*


## 第五節：如何提出貢獻？

讀到這裡，你應該已經找到想要參與的專案了。下一步就來試試看如何具體且正確的踏出貢獻的第一步，向專案裡的夥伴們釋出貢獻訊號！

### 有效溝通

不論你是要長期貢獻，還是只是單次貢獻，學會與其他人共事是開源世界裡一項重要的課題跟技能。在你開始進行議題討論、Pull request 或發問前，以下幾點要牢記，才能幫你更有效率的傳遞想法以及融入這個圈子：

> *第一次嘗試貢獻時，我很快發現如果我想要解決一個議題，我必須要提問、尋求指引。所以在我快速的掃過代碼庫、稍微摸清楚概況後，我就開始試著發問。最後，登登！在獲得所需的資訊後，我成功幫一個議題結案了。*
> *<div style="text-align: right"> ---@shubheksha, 《[一名開源菜鳥的崎嶇之路](https://medium.freecodecamp.org/a-beginners-very-bumpy-journey-through-the-world-of-open-source-4d108d540b39#.pcswr2e78)》</div>*

**提供脈絡：** 不要讓閱讀的人一頭霧水，搞不清楚你在說什麼。例如，你在寫程式時碰到一個錯誤，你必須要解釋你打算怎麼做，還有怎麼複製（fork）它；又或是當你要提案一個新想法時，你也必須說明為何這個提案會對專案有幫助（專案是由大家組成的，而不是一人獨享）。

😇 「當我做 Y 的時候，X 不會出現。」

😢 「X 壞掉了！修一下！」

**發問前先做功課：** 不懂沒關係，但至少要讓別人知道你有嘗試先做些功課，而不是逕自當伸手牌。在提任何發問前，都可以先到專案的 README、文件、議題（開放或結案議題）、郵件，或甚至上網找解答。大家通常更樂於幫助那些有做功課、有用心、願意學習的人。


😇 「我不確定要怎麼執行 X。我已經爬文過了，但還是沒找到相關資訊。」

😢 「要怎麼執行 X ？」

**盡量讓你的提案請求簡短且精確：** 就像你寫 Email 時不會讓內容過度冗長，任何專案貢獻不論是多簡單或有幫助，都還是需要別人花時間去查閱。很多時候，專案會有大量的請求跟發問，但往往不見得有足夠的人力去回應。所以切記保持「簡短」跟「精確」。能夠清楚準確傳遞想法跟問題，對他人來說是個體貼的舉動，也會讓別人更樂於協助。


😇 「我想要寫一個 API 的教學方針」

😢 「某天我從高速公路上下來去加油，突然靈光一閃，想到一些很棒的點子！但在我們進入正題前，我要先給你看...」


**讓所有的溝通都是透明且公開的：** 哪怕是再小的事情，都不要透過私訊討論（除非涉及敏感資訊，如：安全問題或嚴重違反行為準則的事件）。在開源的世界裡，公開透明的討論能吸引更多人參與，每個人都能從交流中受惠、彼此學習——因為討論本身，即是貢獻。


😇 (留言) 「 致 @維護者， 我們該怎麼處理這個 Pull request？」

😢 (電子郵件) 「 哈囉，不好意思打擾了，不曉得你能不能幫我看一下我的 Pull request？」

**保持耐心、保持同理心：** 每個人在某個階段都有可能是新手，就算是再老練的資深貢獻者在初次接觸新專案時也會需要時間消化。同樣的，就算是資深的維護者也不見得事事精通。發問或提出請求時請保持耐心跟同理心，就像你也會希望他們能對於新手的你多點耐心與包容一樣。


😇 「感謝查看了這個錯誤，我有按照您的建議做了，這邊是結果。」

😢 「你為什麼不解決？這不是你的專案嗎？！」

**尊重社群的決定：** 每個人的想法與需求都不同，你的想法不一定永遠會跟專案一致，因為各個社群都會有優先順序的考量或更長遠的願景。當想法有異時，對方可能會回應給你反饋、甚至最終不採取你的建議。你雖然可以持續溝通、討論，或彼此達成某種妥協，但記住維護者比一般會員需要扛下更多責任。如果你真的不能認同社群的走向，你還是可以走自己的路，透過「複製」（fork）去開啟自己的專案。

😇 「我很遺憾我的用戶案例沒有被採納，但如您所解釋的，我的提案只能對少部分用戶產生影響，所以我可以理解您的決定。謝謝您願意聽我的想法。」

😢 「你為什麼不支持我的提案？完全不能接受！」

**以上這麼多點，簡言之，保持善意。** 開源聚集了世界各地的人的協作，這之中有許多語言、文化、地理跟時間上的差距需要克服。而文字的溝通在傳遞語氣跟情緒上有時更難捉摸，因此大家更需要保持開放胸襟，讓對話保持善意。碰到想法差異時，可以禮貌的回絕、或詢問更多資訊、或進一步闡明自己的立場。請記得，如果你當初踏進網路世界時覺得它很美好，離線時請讓這份美好更好。

### 觀察、找資料、做功課

做任何事情前要先爬文，確定自己的想法跟提案尚未被討論過。沒有要你花好幾個小時資訊轟炸自己，但可以透過快速瀏覽專案的 README、議題（開放或已結案）、電郵跟 Stack Overflow，或利用關鍵字搜尋，看看有哪些是已經做過了，哪些尚未。

如果你的想法還沒有人做過，那你就來做吧！如果專案是在 GitHub 上，你的第一步通常會是開啟新議題或 Pull request：

- 開啟 **新議題** 就像開啟一場對話跟討論
- Pull request 則是開始解決問題 
- 不涉及大量討論的溝通，例如只是解釋「how-to」的問題，盡量移至 Stack Overflow、IRC、Slack 或其他通訊渠道。

在你開啟新議題跟 Pull request 之前，記得檢查該專案的「貢獻文件」（文件檔案通常稱作「Contributing」，或在 README 裡），確認是否有具體的提案條件需要被滿足。例如，依規定你需要使用某個模板或使用某個測試。

如果你有志要做出更有影響力的貢獻，那在一股腦投入前可以先透過開啟新議題來尋求反饋。比較有幫助的做法是先觀察一個專案一段時間（ GitHub 上有「[Ｗatch](https://help.github.com/articles/watching-and-unwatching-repositories/)」的功能協助追蹤專案的所有動態），先了解該社群的生態跟成員組成，以免你的貢獻被打槍。

> *就算只是單個專案，只要你很積極使用它，也可以從裡面學到超多。善用 GitHub 上的「Watch」功能來追蹤專案的每個議題跟 Pull request。*
> *<div style="text-align: right"> ---@gaearon《[參與專案](https://twitter.com/dan_abramov/status/819555257055322112)》</div>*

### 啟動新議題

通常在以下的情況你會需要開啟新議題：

- 通報你自己無法解決的錯誤
- 討論層次更高的問題（例如：關於社群的願景跟政策方針）
- 提案新功能或其他專案想法

以下提供幾個議題溝通的小撇步：

- 如果你找到一個想解決的開放議題，你可以透過留言評論（comment）讓其他人知道你有興趣接手，這樣就可避免與他人的工作重疊。
- 如果一項議題是很久以前被開啟的，很有可能已經有人認養處理中，或早就被解決了。建議這時留言去確認這項議題的狀態。
- 如果你在開了一項議題之後自己就找到解決方法了，請留言告知社群中的夥伴，然後再關閉該議題——記錄結果本身即是貢獻。


### 啟動 Pull request 

通常在以下的情況你會需要啟動 Pull request：

- 錯誤提報（例如錯字、失效連結，或其他明顯的錯誤）
- 解決別人已經提出的貢獻、例如在議題中被討論的事

Pull request 不一定代表 A pull request doesn’t have to represent finished work. It’s usually better to open a pull request early on, so others can watch or give feedback on your progress. 記得在主旨中標記「WIP」（正在進行中；Work in Progress），之後可以繼續添加提交指令（commits）。

如果你的專案是在 GitHub 上，以下幾點如何提交 Pull request 的建議供參：

- [複製（Fork）、？？（Clone）儲存庫到本地](https://guides.github.com/activities/forking/)
  Fork 代码仓库 并克隆到本地，在本地的仓库配置”上游”为远端仓库。这样你可以在提交你的PR时保持和”上游”同步，会减少很多解决冲突的时间。(更多关于同步的说明，请参考这里.) Fork the repository and clone it locally. Connect your local to the original “upstream” repository by adding it as a remote. Pull in changes from “upstream” often so that you stay up to date so that when you submit your pull request, merge conflicts will be less likely. (See more detailed instructions here.)
  
- 幫你的編輯[創建一個分支（branch）](https://guides.github.com/introduction/flow/)。Create a branch for your edits.
- 在 Pull request 中幫相關的議題跟文件建立索引編號，例如：「Closes #37」
Reference any relevant issues or supporting documentation in your PR (for example, “Closes #37.”)
- 如果修正之處包含 HTML/CSS 的差別，要截圖並拖曳至 Pull request 裡。
Include screenshots of the before and after if your changes include differences in HTML/CSS. Drag and drop the images into the body of your pull request.
- **修改測試！** 
Test your changes! Run your changes against any existing tests if they exist and create new ones when needed. Whether tests exist or not, make sure your changes don’t break the existing project.
- 盡你所能和專案的風格保持一致。也許在諸如縮排、分號或註解的使用上與你原先風格有所差異，但為方便他人理解、進行合併，以及傳承給之後的夥伴，維持風格的一致仍有其必要性。

若這是你第一次提交 Pull request，可以同步參考由 @kentcdods 製作的「[Make a Pull Request](http://makeapullrequest.com/)」教學導覽影片，或是在 @Roshanjossey 打造的「First Contributions」倉庫裡進行練習。

## 第六節：貢獻完之後，然後呢？

恭喜你，成功成為一名開源貢獻者！希望這只是一個開端，未來還有更多來自你的參與。

在你成功貢獻後，通常會產生以下幾種狀況：

### 無人回應 😭 

希望你事前有先去[檢查該專案的活躍度](https://opensource.guide/zh-cn/how-to-contribute/#a-checklist-before-you-contribute)，但有時就算是本身很活躍的專案，也未必保證會有人回應貢獻。

如果碰到這種情況，你可以耐心的先等一個禮拜，之後再禮貌性的詢問是否有人願意協助審閱你發出的議題或 Pull request。如果你知道要找誰來幫忙審閱，可以使用「＠+名字」直接邀請他來參與。

千萬不要私訊聯繫。永遠謹記，公開透明的交流是開源專案非常重要的精神。

如果各種方法都嘗試過了仍然沒獲得回應，也別太灰心，這種經驗每個人或多或少都碰過。事實上，這背後可能有太多你我無法掌控的理由導致無人回應。無人回應其實也是個很好的經驗，代表在一股腦貢獻之前，你可以先與社群中的其他會員互動、試試水溫。就把它當作一個參與開源貢獻的經驗，帶著這份經驗去尋找下一個專案、或嘗試用別的方法去貢獻。

### 有人對你的貢獻提出修正需求 🚧 

開源專案中被要求修正自己的貢獻是很普遍的現象，對方可能是針對你的想法給予回饋，也可能是要你修正程式碼。不論是何種，這都是開源專案裡很常見的互動。所以，當碰他人提出修正需求時，你應該要友善回應，畢竟別人也花了時間審閱你的貢獻。你不能在啟動 Pull request 之後就棄之不顧、一走了之。倘若你不知道該怎麼修正，可以試著去搜尋相關問題、尋求他人協助。

如果你是因為沒有時間繼續參與（例如討論已持續數個月，你周遭的狀況改變以致於無法再參與），那麼記得通知維護者，請他們不用再繼續等待回應，讓其他有興趣的貢獻者接手處理。

### 你的貢獻被拒絕了 👎 

你的提交可能最後沒有被採納。如果是這樣的情況，但願你一開始沒有不成比例的付出。如果你想進一步了解拒絕的原因，你可以請維護者反饋或說明。但不論如何，都還是必須尊重社群的決定，不要讓自己陷入不友善的爭辯之中。

記得，你永遠都可以把議題複製回去自己的倉庫、照自己的方式做自己的專案。

### 你的貢獻被接受了！🎉 

那麼非常恭喜你晉身成為開源貢獻者！

## 第七節：恭喜你完成了第一次的開源貢獻！

> 不論你是剛完成開源專案貢獻初體驗，還是正在尋覓下個新專案，我們由衷希望這份指南有帶給你啟發跟靈感。假若你的貢獻沒有被採納，也別忘了對協助過你的維護者說聲謝謝。
> 
> 開起議題、Pull request、評論、討論——開源世界，就是來自於成千上萬個像你一樣的人，一起貢獻所成就的。


